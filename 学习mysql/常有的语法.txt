查看当前所有存在的数据库？
show databases;   // show出来, 不止一个数据库这里我们要加s

创建数据库？
create database database_name

删除数据库？
drop database database_name;  // 注意这里的删除用的是drop, 而不是delete

选择当前数据库？
use database_name;

修改字段名？
alter table <表名> change <旧字段名> <新字段名> <新数据类型>;
 alter table tb_dept1 change location loc varchar(50);

添加字段？
alter table tb_dept1 add column1 varchar(12) not null;

更改表的存储引擎？
alter table tb_dept1 engine = myisam;
1 alter table <表名> engine = <更改后的存储引擎名>;
2 alter table tb_dept1 engine = myisam;

登录mysql数据库
1 mysql -h hostname -u username -p
如何hostname是本机的话，要替换为127.0.0.1或者是localhost

例子：mysql -h localhost -uroot -p

这样输完之后会换行让你输密码，我们也可以直接把密码写在-p后面，当然这样不安全。



更改root密码
1 /usr/bin/mysqladmin -u root password '123456'
执行完这条命令后，root的密码改为123456。

查看默认引擎
1 show variables like 'storage_engine';

设置表的属性值自动增加
mysql中auto_increment的初始值是1，每新增一条记录，字段值自动加1.

如果突然插了一个很大的id，那么id自动增是怎么增的呢？

一个表只能由一个字段使用auto_increment约束，且字段必须为主键的一部分，可以是任何整数类型。

自动增加语法规则如下：

1 字段名 数据类型 auto_increment
示例：

1 create table tb_emp8 (
2     id     int(11) primary key auto_increment,
3     name   varchar(25) not null,
4     deptId int(11),
5     salary float
6 );


修改字段的数据类型
把字段的数据类型转化为另一种数据类型

1 alter table <表名> modify <字段名> <数据类型>
示例：

alter table tb_dept1 modify name varchar(30);
要是同时修改多个字段数据类型怎么办？


修改字段的数据类型
把字段的数据类型转化为另一种数据类型

1 alter table <表名> modify <字段名> <数据类型>
示例：

alter table tb_dept1 modify name varchar(30);
要是同时修改多个字段数据类型怎么办？

回到顶部
修改字段名
1 alter table <表名> change <旧字段名> <新字段名> <新数据类型>;
新的数据类型是指修改后的数据类型，如果不需要修改数据类型可以将其设置为和原来一毛一样，但就是不能为空。

1 alter table tb_dept1 change location loc varchar(50);
不同数据类型在机器中的存储方式及长度并不相同，修改数据类型可能会影响数据表中已有的数据。

因此当数据表中已经有数据时，不要轻易修改数据类型。

回到顶部
添加字段
1 alter table <表名> add <新字段名> <数据类型> [约束条件] [first | after 已存在的字段名];
如果不设置first或者after参数，则默认将新加的字段设置为数据标的最后一列。

示例：

1 alter table tb_dept1 add managerId INT(10);
2 alter table tb_dept1 add column1 varchar(12) not null;
3 alter table tb_dept1 add column2 int(11) first;
4 alter table tb_dept1 add column3 int(11) after name;
回到顶部
删除字段
1 alter table <表名> drop <字段名>;
2 alter table tb_dept1 drop column2;
回到顶部
修改字段的排列位置
1 alter table <表名> modify <字段1> <数据类型> first | after <字段2>;
2 alter table tb_dept1 modify column1 varchar(12) first;
3 alter table tb_dept1 modify column1 varchar(12) after location;
回到顶部
更改表的存储引擎
1 alter table <表名> engine = <更改后的存储引擎名>;
2 alter table tb_dept1 engine = myisam;
回到顶部
删除表的外键约束
1 alter table <表名> drop foreign key <外键约束名>;
外键约束名是在定义表时constraint关键字后面的参数。示例：受限创建表tb_emp9

复制代码
1 create table tb_emp9 (
2     id        int(11） primary key,
3     name      varchar(25),
4     deptId    int(11),
5     salary    float,
6     constraint fk_emp_dept foeign key (deptId) references tb_dept1(id)
7 );
8 alter table tb_emp9 drop foreign key fk_emp_dept;
9 show create table tb_emp9 \G
复制代码
回到顶部
删除数据表
将数据库中已经存在的表从数据库中删除，删除表的同时表的定义和表中的数据都会被删除。

1 drop table一次可以删除一个或者多个表
2 drop table [if exists] 表1, 表2, ..., 表n;
回到顶部
删除被其他表关联的主表
数据表存在外键的情况下，如果直接删除父表，结果会报错。

这样会破坏表的参照完整性，如果必须要删除可以先删除子表，再删除父表。

如果要保留子表，删除父表，则首先要解除子表的外键，然后删除父表。

示例：在数据库中创建两个关联的表，首先创建表tb_dept2：

1 create table tb_dept2 (
2     id       int(11) primary key,
3     name     varchar(22),
4     location varchar(50)
5 );
接下来创建tb_emp

复制代码
1 create table tb_emp (
2     id        int(11) primary key,
3     name      varchar(25),
4     deptId    int(11),
5     salary    float,
6     constraint fk_emp_dept foreign key(deptId) references tb_dept2(id)
7 );
复制代码